In this assignment, you are to write and test C++ code (using a separate program for each part) as described below.
	Part 1 (50 points)
(Supplied Files)
A linked-list processing function MakeDistinctPairs that is to process a linked list as follows.
	- Does nothing if given list is empty.
	If given list is not empty, process it so that it contains a sequence of "distinct item pairs".
	    - The distinct data items are derived from the data items in the given list:
	       If given list (originally) has multiple nodes containing a certain distinct value, the second such node (i.e. the earliest duplicate) is to be detached and inserted right after the first such node (to form a pair).

	NOTE:	Although the node to be detached does not have to be the first duplicate and the insertion does not have to be right after (i.e., it can also be right before) the first for the function to work as intended, you are to make it so for the purpose of this exercise.
	NOTE:	Of course, no detaching-and-inserting work is necessary if the "second such node" is already right after the "first such node".

    All remaining duplicates (if any, of a certain distinct value) are to be deleted from the list.

	NOTE:	No memory leak should be incurred, of course.

If given list (originally) has only a single node containing a certain distinct value, a new node for the value is to be created and inserted right after it (to form a pair).

The distinct values (one for each pair) must appear in the same order in which the first of the corresponding values originally (upon entering the function) appear in the given list.



IMPORTANT requirements (you will earn little or no points if you don't do according to these):
    Algorithm should:

	NOT change the data of any existing nodes.

	Destroy ONLY existing nodes that constitute second duplicate, third duplicate, etc. of a certain distinct value.

	Recall that the first duplicate is not to be destroyed but instead detached and inserted (unless it is already at where it should be).

	NOTE Create new nodes and copy data between nodes ONLY under the "given list (originally) has only a single node containing a certain distinct value" circumstances.

	Creating pointer-to-node's (to provide temporary storage for node addresses) does not constitute creating new nodes or copying of items.

	DO NOT make any temporary copies of any of the data items (using any kind of data structures including but not limited to arrays, linked lists and trees).

	This means that the algorithm should largely involve the manipulation of pointers.

	Function must be iterative (NOT recursive) - use only looping construct(s), without the function calling itself (directly or indirectly).

	Function should NOT call any other functions to help in performing the task.

Your Tasks

	Read the description thoroughly and carefully to understand exactly what MakeDistinctPairs is meant to do and the IMPORTANT requirements you must meet when implementing the function.

	Fill in the prototype for MakeDistinctPairs in the supplied header file (llcpInt.h).

	Fill in the definition for MakeDistinctPairs in the supplied implementation file (llcpImp.cpp).

	Test/debug your code using the supplied tester file (Assign05P1.cpp) and Makefile.

	Do make to compile or re-compile.

	Do make go (after successful compilation or re-compilation) to test with result output to terminal.

	Program will (display some error messages and) abort on the first detection of an incorrect outcome (associated with a certain test case).

	If the program hangs, it typically means your code has led to an infinite loop. Regardless, you should do Ctrl-c to get out of the hanged state.

	If you need to identify which specific test case causes the program to hang or quit abruptly ("bomb out" due to segmentation fault, for instance), uncomment the DebugShowCase line (Line 74 in Assign05P1.cpp as supplied), then re-compile the program and re-run the test.

	If you do enable DebugShowCase (uncomment Line 74 in Assign05P1.cpp) during debugging, be sure to revert it back to disabled when generating the test output (a5p1test.out) for hardcopy submission, otherwise the test output can be humongous.

	Do make gogo (after successful compilation or re-compilation) to test with result (excluding progress-logging messages) output to file (a5p1test.out).

	(The a5p1test.out included in the Supplied Files was generated by compiling and running the program on the CS Linux server. Expect the test cases to be different if another system is used since the algorithm used for the pseudo-random number generator vary from system to system.)